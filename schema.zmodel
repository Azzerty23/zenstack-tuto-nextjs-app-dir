generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

plugin enhancer {
    provider = '@core/enhancer'
    output = "node_modules/.zenstack"
    preserveTsFiles = true
}

plugin hooks {
  provider = '@zenstackhq/swr'
  output = "./src/lib/hooks"
}

// abstract model Creator extends User {
//   createdAt DateTime @default(now())
//   creator User @relation("createdBy", fields: [createdBy], references: [id])
// 	// creator User @relation(fields: [createdBy], references: [id])
//   createdBy String @default(auth().id)

// }

// abstract model Updater extends User {
//   updatedAt DateTime @default(now())
//   updater User @relation("updatedBy", fields: [updatedBy], references: [id])
//   updatedBy String @default(auth().id)
// }

// abstract model Base {
//   id String @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   creator User @relation("createdBy", fields: [createdBy], references: [id])
//   createdBy String @default(auth().id)
//   updater User @relation("updatedBy", fields: [updatedBy], references: [id])
//   updatedBy String @default(auth().id)
// }

model Vehicle {
  id String @id @default(cuid())
  model String
  year Int
  type String
  creator User @relation(fields: [createdBy], references: [id])
  createdBy String @default(auth().id)
  @@allow('read', true)
  @@allow('delete', auth() == creator)

  @@delegate(type)
}

model Car extends Vehicle {
  isConvertible Boolean
}

model Motorcycle extends Vehicle {
  hasHeatedGrips Boolean
}


model Content {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean @default(false)
  owner User? @relation(fields: [createdBy], references: [id])
  createdBy String? @default(auth().id)
  contentType String

  @@delegate(contentType)

  // owner has full access
  @@allow('all', auth() == owner)

  // logged-in users can view published posts
  @@allow('read', auth() != null && published)
}

// db.user.create({ data: {name: "user-test", email: "test-1@email.com", password: "1234"} })
// db.post.create({data: {title: "test-1", published: true} })
model Post extends Content {
  title String
}

model Video extends Content {
  name String
  duration Int
}

// Necessary for Next auth
model Account {
  id String @id @default(cuid())
  userId String
  type String
  provider String
  providerAccountId String
  refresh_token String?
  access_token String?
  expires_at Int?
  token_type String?
  scope String?
  id_token String?
  session_state String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(cuid())
  sessionToken String @unique
  userId String
  expires DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(cuid())
  name String?
  email String? @unique
  emailVerified DateTime?
  password String @password @omit
  image String?
	vehicles Vehicle[]
  contents Content[]
  accounts Account[]
  sessions Session[]

  // everyone can signup, and user profile is also publicly readable
  @@allow('create,read', true)

  // only the user can update or delete their own profile
  @@allow('update,delete', auth() == this)
}

model VerificationToken {
  id String @id @default(cuid())
  identifier String
  token String @unique
  expires DateTime
  @@unique([identifier, token])
}
